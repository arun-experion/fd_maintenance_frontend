import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import * as i0 from "@angular/core";
var Model = /** @class */ (function () {
    function Model(initialData, immutable, sharedSubscription, clone) {
        var _this = this;
        this.immutable = immutable;
        this.clone = clone;
        this._data = new BehaviorSubject(initialData);
        this.data$ = this._data.asObservable().pipe(map(function (data) {
            return _this.immutable
                ? clone
                    ? clone(data)
                    : JSON.parse(JSON.stringify(data))
                : data;
        }), sharedSubscription
            ? shareReplay({ bufferSize: 1, refCount: true })
            : map(function (data) { return data; }));
    }
    Model.prototype.get = function () {
        var data = this._data.getValue();
        return this.immutable
            ? this.clone
                ? this.clone(data)
                : JSON.parse(JSON.stringify(data))
            : data;
    };
    Model.prototype.set = function (data) {
        if (this.immutable) {
            var clone = this.clone
                ? this.clone(data)
                : JSON.parse(JSON.stringify(data));
            this._data.next(clone);
        }
        else {
            this._data.next(data);
        }
    };
    return Model;
}());
export { Model };
var ModelFactory = /** @class */ (function () {
    function ModelFactory() {
    }
    ModelFactory.prototype.create = function (initialData) {
        return new Model(initialData, true, false);
    };
    ModelFactory.prototype.createMutable = function (initialData) {
        return new Model(initialData, false, false);
    };
    ModelFactory.prototype.createMutableWithSharedSubscription = function (initialData) {
        return new Model(initialData, false, true);
    };
    ModelFactory.prototype.createWithCustomClone = function (initialData, clone) {
        return new Model(initialData, true, false, clone);
    };
    ModelFactory.prototype.createWithConfig = function (config) {
        var initialData = config.initialData, immutable = config.immutable, sharedSubscription = config.sharedSubscription, clone = config.clone;
        return new Model(initialData, immutable, sharedSubscription, clone);
    };
    ModelFactory.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ModelFactory_Factory() { return new ModelFactory(); }, token: ModelFactory, providedIn: "root" });
    ModelFactory = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ModelFactory);
    return ModelFactory;
}());
export { ModelFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1leHRlbnNpb25zL21vZGVsLyIsInNvdXJjZXMiOlsibW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUVsRDtJQUtFLGVBQ0UsV0FBZ0IsRUFDUixTQUFrQixFQUMxQixrQkFBMkIsRUFDbkIsS0FBc0I7UUFKaEMsaUJBbUJDO1FBakJTLGNBQVMsR0FBVCxTQUFTLENBQVM7UUFFbEIsVUFBSyxHQUFMLEtBQUssQ0FBaUI7UUFFOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUN6QyxHQUFHLENBQUMsVUFBQyxJQUFPO1lBQ1YsT0FBQSxLQUFJLENBQUMsU0FBUztnQkFDWixDQUFDLENBQUMsS0FBSztvQkFDTCxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDYixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwQyxDQUFDLENBQUMsSUFBSTtRQUpSLENBSVEsQ0FDVCxFQUNELGtCQUFrQjtZQUNoQixDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDaEQsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQU8sSUFBSyxPQUFBLElBQUksRUFBSixDQUFJLENBQUMsQ0FDM0IsQ0FBQztJQUNKLENBQUM7SUFFRCxtQkFBRyxHQUFIO1FBQ0UsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQyxTQUFTO1lBQ25CLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSztnQkFDVixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNYLENBQUM7SUFFRCxtQkFBRyxHQUFILFVBQUksSUFBTztRQUNULElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSztnQkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUNsQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFFckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEI7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUNILFlBQUM7QUFBRCxDQUFDLEFBOUNELElBOENDOztBQUtEO0lBQUE7S0EwQkM7SUF6QkMsNkJBQU0sR0FBTixVQUFPLFdBQWM7UUFDbkIsT0FBTyxJQUFJLEtBQUssQ0FBSSxXQUFXLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxvQ0FBYSxHQUFiLFVBQWMsV0FBYztRQUMxQixPQUFPLElBQUksS0FBSyxDQUFJLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELDBEQUFtQyxHQUFuQyxVQUFvQyxXQUFjO1FBQ2hELE9BQU8sSUFBSSxLQUFLLENBQUksV0FBVyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsNENBQXFCLEdBQXJCLFVBQXNCLFdBQWMsRUFBRSxLQUFxQjtRQUN6RCxPQUFPLElBQUksS0FBSyxDQUFJLFdBQVcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCx1Q0FBZ0IsR0FBaEIsVUFBaUIsTUFLaEI7UUFDUyxJQUFBLGdDQUFXLEVBQUUsNEJBQVMsRUFBRSw4Q0FBa0IsRUFBRSxvQkFBSyxDQUFZO1FBQ3JFLE9BQU8sSUFBSSxLQUFLLENBQUksV0FBVyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6RSxDQUFDOztJQXpCVSxZQUFZO1FBSHhCLFVBQVUsQ0FBQztZQUNWLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUM7T0FDVyxZQUFZLENBMEJ4Qjt1QkFqRkQ7Q0FpRkMsQUExQkQsSUEwQkM7U0ExQlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNsYXNzIE1vZGVsPFQ+IHtcbiAgcHJpdmF0ZSBfZGF0YTogQmVoYXZpb3JTdWJqZWN0PFQ+O1xuXG4gIGRhdGEkOiBPYnNlcnZhYmxlPFQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGluaXRpYWxEYXRhOiBhbnksXG4gICAgcHJpdmF0ZSBpbW11dGFibGU6IGJvb2xlYW4sXG4gICAgc2hhcmVkU3Vic2NyaXB0aW9uOiBib29sZWFuLFxuICAgIHByaXZhdGUgY2xvbmU/OiAoZGF0YTogVCkgPT4gVFxuICApIHtcbiAgICB0aGlzLl9kYXRhID0gbmV3IEJlaGF2aW9yU3ViamVjdChpbml0aWFsRGF0YSk7XG4gICAgdGhpcy5kYXRhJCA9IHRoaXMuX2RhdGEuYXNPYnNlcnZhYmxlKCkucGlwZShcbiAgICAgIG1hcCgoZGF0YTogVCkgPT5cbiAgICAgICAgdGhpcy5pbW11dGFibGVcbiAgICAgICAgICA/IGNsb25lXG4gICAgICAgICAgICA/IGNsb25lKGRhdGEpXG4gICAgICAgICAgICA6IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gICAgICAgICAgOiBkYXRhXG4gICAgICApLFxuICAgICAgc2hhcmVkU3Vic2NyaXB0aW9uXG4gICAgICAgID8gc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KVxuICAgICAgICA6IG1hcCgoZGF0YTogVCkgPT4gZGF0YSlcbiAgICApO1xuICB9XG5cbiAgZ2V0KCk6IFQge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9kYXRhLmdldFZhbHVlKCk7XG4gICAgcmV0dXJuIHRoaXMuaW1tdXRhYmxlXG4gICAgICA/IHRoaXMuY2xvbmVcbiAgICAgICAgPyB0aGlzLmNsb25lKGRhdGEpXG4gICAgICAgIDogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICAgIDogZGF0YTtcbiAgfVxuXG4gIHNldChkYXRhOiBUKSB7XG4gICAgaWYgKHRoaXMuaW1tdXRhYmxlKSB7XG4gICAgICBjb25zdCBjbG9uZSA9IHRoaXMuY2xvbmVcbiAgICAgICAgPyB0aGlzLmNsb25lKGRhdGEpXG4gICAgICAgIDogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cbiAgICAgIHRoaXMuX2RhdGEubmV4dChjbG9uZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2RhdGEubmV4dChkYXRhKTtcbiAgICB9XG4gIH1cbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTW9kZWxGYWN0b3J5PFQ+IHtcbiAgY3JlYXRlKGluaXRpYWxEYXRhOiBUKTogTW9kZWw8VD4ge1xuICAgIHJldHVybiBuZXcgTW9kZWw8VD4oaW5pdGlhbERhdGEsIHRydWUsIGZhbHNlKTtcbiAgfVxuXG4gIGNyZWF0ZU11dGFibGUoaW5pdGlhbERhdGE6IFQpOiBNb2RlbDxUPiB7XG4gICAgcmV0dXJuIG5ldyBNb2RlbDxUPihpbml0aWFsRGF0YSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIGNyZWF0ZU11dGFibGVXaXRoU2hhcmVkU3Vic2NyaXB0aW9uKGluaXRpYWxEYXRhOiBUKTogTW9kZWw8VD4ge1xuICAgIHJldHVybiBuZXcgTW9kZWw8VD4oaW5pdGlhbERhdGEsIGZhbHNlLCB0cnVlKTtcbiAgfVxuXG4gIGNyZWF0ZVdpdGhDdXN0b21DbG9uZShpbml0aWFsRGF0YTogVCwgY2xvbmU6IChkYXRhOiBUKSA9PiBUKSB7XG4gICAgcmV0dXJuIG5ldyBNb2RlbDxUPihpbml0aWFsRGF0YSwgdHJ1ZSwgZmFsc2UsIGNsb25lKTtcbiAgfVxuXG4gIGNyZWF0ZVdpdGhDb25maWcoY29uZmlnOiB7XG4gICAgaW5pdGlhbERhdGE6IFQ7XG4gICAgaW1tdXRhYmxlOiBib29sZWFuO1xuICAgIHNoYXJlZFN1YnNjcmlwdGlvbjogYm9vbGVhbjtcbiAgICBjbG9uZTogKGRhdGE6IFQpID0+IFQ7XG4gIH0pIHtcbiAgICBjb25zdCB7IGluaXRpYWxEYXRhLCBpbW11dGFibGUsIHNoYXJlZFN1YnNjcmlwdGlvbiwgY2xvbmUgfSA9IGNvbmZpZztcbiAgICByZXR1cm4gbmV3IE1vZGVsPFQ+KGluaXRpYWxEYXRhLCBpbW11dGFibGUsIHNoYXJlZFN1YnNjcmlwdGlvbiwgY2xvbmUpO1xuICB9XG59XG4iXX0=